---
title: "Análise exploratória: Visualização de dados"
author: "Gabriel A. D. Serafini"
format: html
editor: visual
warming: false
menssage: false
---

# Visualização de Dados

A visualização de dados é um componente essencial na análise de dados, permitindo que você explore, entenda e comunique padrões, tendências e insights de forma eficaz. Utilizando gráficos e tabelas, você pode transformar dados brutos em informações visuais compreensíveis, facilitando a interpretação e tomada de decisões. No R, pacotes como `ggplot2`, `tidyverse` e `patchwork` oferecem ferramentas poderosas para criar visualizações sofisticadas e personalizadas.

## Abrindo Arquivo .CSV

Utilizamos o "tidyverse" para abrir a planilha em .CSV com o comando "read_csv" e o link para o arquivo.

Dentro do primeiro chunk colocar #\| warming: false e #\| menssage: false para não aparecer avisos e mensagens quando fizer o "Render", naquele chunk. se colocar no cabeçalho é aplicado para todos os chunks e não aparece para nenhum.

```{r}
#| warming: false
#| menssage: false

library(tidyverse)

cr <- read_csv("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")
```

A tabela importada foi:

```{r}
head(cr)
```

Para visualizar o conjunto de dados pode-se utilizar a função "glimpse" que mostra os detalhes da tabela e das váriaveis.

```{r}
glimpse(cr)
```

## Visualização de dados

No historama podemos obserar a dispersão dos dados. Além disso, podemos plotar um sumário para saber dados sobre os dados como um todo.

```{r}
library(ggplot2)
cr |>
  ggplot(aes(x = inc))+
  geom_histogram()+
  facet_wrap(~region) #Separa por região.

summary(cr$inc)
```

```{r}
cr |>
  group_by(region) |>
  summarize(inc_mean = mean(inc),
            inc_med = median(inc),
            sd_mean = sd(inc))

```

```{r}
cr |>
  group_by(cultivar) |>
  summarize(inc_mean = mean(inc),
            inc_med = median(inc),
            sd_mean = sd(inc))
```

Podemos plotar um gráfico de distribuição, em realação a duas variáveis para poder observar melhor a relação entre elas.

```{r}
cr |>
  ggplot(aes(inc, sev2))+
  geom_point()
```

Podemos obervar melhor a simetria das variáveis, se a mediana e média forem mais próximas uma das outras a curva é simétrica, se estiverem não simétricas, podemos observar uma assimetria com cauda para a direita ou a esquerda.

```{r}
library(ggplot2)
cr |>
  ggplot(aes(x = sev2))+
  geom_histogram()+
  facet_wrap(~region) #Separa por região.

summary(cr$sev2)

cr |>
  group_by(region) |>
  summarize(sev_mean = mean(sev2),
            sev_med = median(sev2),
            sd_mean = sd(sev2))
```

Se formos olhar por cultivar, fica mais simétrico.

```{r}
library(ggplot2)
cr |>
  ggplot(aes(x = sev2))+
  geom_histogram()+
  facet_wrap(~cultivar) #Separa por região.

summary(cr$sev2)

cr |>
  group_by(cultivar) |>
  summarize(sev_mean = mean(sev2),
            sev_med = median(sev2),
            sd_mean = sd(sev2))
```

Se quiser modificar as cores por região, colocar "fill" no ggplot, se colocar depois ele muda tudo.

O theme_minimal tem que ver depois do scale_fill_manual pois se não irá sobrescever

```{r}
library(ggthemes)
cr |>
  ggplot(aes(x = sev2, fill = region))+
  geom_histogram(color = "white")+ #Color aqui é para aborda das barras do histograma.
  facet_wrap(region ~ cultivar, ncol = 6)+ #ncol coloca o número de colunas por plot
  #scale_fill_colorblind() #Aqui altera a plheta de cores
  scale_fill_manual(values = c("red", "blue"))+ #escolha manual
  theme_minimal(base_size = 14)+ #vem depois, se não sobrescreve o scale_fill_manual, aqui também altera a fonte com base_size)
  theme(legend.position = "bottom")+
  labs(y = "Frequency",
       x = "Severity (%)",
       fill = "Region") #Alterou o nome, que estava como o da variável
ggsave("cr1.png", bg ="white")
```

## 
