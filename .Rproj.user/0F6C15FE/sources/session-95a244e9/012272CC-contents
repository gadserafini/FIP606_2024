---
title: "Análise Estatística: Estatística inferencial - Parte 2"
author: "Gabriel A D Serafini"
format: html
editor: visual
---

# Análise de Variância (ANOVA)

## One-Way ANOVA

A **One-Way ANOVA** (Análise de Variância de um Fator) é um teste estatístico utilizado para determinar se existem diferenças significativas entre as médias de três ou mais grupos independentes. A "one-way" refere-se ao fato de que há apenas uma variável independente (fator) sendo testada. Este teste é usado quando se quer comparar as médias de diferentes grupos para verificar se pelo menos um grupo difere significativamente dos outros.

Desta vez iniciaremos garantindo que todos os gráficos tenham uma aparência unica ao longo do documento, para isso, configuraremos o tema para `theme_bw()` usando a função `theme_set()`.

```{r}
library(tidyverse)
theme_set(theme_bw())
```

Para este tópico utilizamos o conjunto de dados `InsectSprays` para nossa análise. Este conjunto de dados contém informações sobre a contagem de insetos após a aplicação de diferentes sprays.

```{r}
inseticida <- InsectSprays
head(inseticida)
```

Antes de prosseguir com a análise, é útil entender a distribuição das observações entre os diferentes tipos de spray. Para isso, utilizamos a função `count()` do pacote `tidyverse`, que conta o número de ocorrências de cada categoria na variável `spray`.

```{r}
library(tidyverse)
inseticida |> 
  count(spray)
```

A função `count()` é usada para contar as ocorrências de valores únicos em uma coluna. No caso acima, estamos contando quantas vezes cada tipo de spray aparece no conjunto de dados `InsectSprays`.

Para ter uma visão geral da contagem por tipo de spray, usamos o *boxplot* (gráfico de caixa) e *jitter* para a dispersão.

```{r}
library(ggplot2)
inseticida |>
  ggplot(aes(x = spray, y = count))+
  geom_boxplot()+
  geom_jitter()+
  theme_bw()
```

O boxplot dá indícios de que as médias C, D e E diferem das demais. Entretanto, o plot da variatiância dos dados é bem grande e com presença de outliers.

```{r}
m1 <- lm(count ~ spray,
         data = inseticida)
summary(m1)
anova(m1)
```

Segundo a one-way ANOVA, o p-valor associado ao teste F foi \< 0.05, indicando que há uma diferença estatisticamente significativa entre pelo menos um par de grupos de spray.

### Diagnóstico dos Resíduos

Para garantir que o modelo ANOVA seja válido, verificamos os resíduos do modelo para normalidade e homocedasticidade. Inicialmente a normalidade dos resíduos e a homocedasticidade foram verificadas usando um histograma e um gráfico QQ, respectivamente.

```{r}
m1$residuals
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
```

Segundo obvervado no histograma, os residuos aparentemente seguem uma distribuição normal. Olhando o gráfico QQ os pontos extremos se distanciam em muito a linha central, o que indica não haver homocedesticidade.

Entretanto, para sabermos definitivamente, de uma forma não subjetiva, se os dados atendem aos preceitos estátisticos, foram feitos o teste de Shapiro-Wilk, para verificar a normalidade e Bartlett para testarmos a homogeneidade de variância.

```{r}
shapiro.test(m1$residuals)
bartlett.test(count ~ spray,
              data = inseticida)
```

Em ambos os testes o p-valor foi \< 0.05, assim os dados não apresentam normalidade e homogeneidade de variância pelo teste de Shapiro-Wilk e Bartllet, respectivamente. Destre deste preceitos estatísticos, a falta de normalidade é mais "leve" do que a falta de homocedasticidade.

Outras funções como `check_normality()` e `check_heteroscedasticity()` do pacote `performance` são outras opções poderosas de ferramentas para verificar os pressupostos de normalidade e homocedasticidade.

```{r}
library(performance)
check_normality(m1)
check_heteroscedasticity(m1)
```

As funções do pacote `performance` oferecem uma saída escrita e em cores que identificam se atendeu (verde) ou não (vermelho) ao teste em que os dados foram submetidos. Essas verificações são essenciais para garantir que as inferências estatísticas sejam válidas.

No caso do exemplo, como dito anteriormente, os dados não apresentaram normalidade e homogeneidade de variância.

Outra opção é a utilização do pacote `DHARMa` (Residual Diagnostics for Hierarchical (Multi-Level / Mixed) Regression Models), ecificamente a função `simulateResiduals()`. Esta função é usada para gerar resíduos simulados a partir do modelo ajustado. Isso é feito para criar uma distribuição de referência que é usada para diagnosticar o modelo.

```{r}
library(DHARMa)
plot(simulateResiduals(m1))
```

O gráfico da esquerda, *QQ Plot Residuals*, tem por objetivo verificar a normalidade dos resíduos. Este gráfico compara os quantis dos resíduos observados com os quantis de uma distribuição normal teórica. Os pontos no gráfico representam os resíduos simulados, e a linha diagonal representa a distribuição normal teórica. Na imagem, os pontos estão próximos da linha diagonal, indicando que os resíduos são aproximadamente normais.

Esta mesma função realiza o teste de Kolmogorov-Smirnov (KS), este teste é usado para testar a hipótese de que os resíduos seguem uma distribuição normal. Um p-valor de 0.380 indica que não rejeitamos a hipótese nula de normalidade, sugerindo que os resíduos são normalmente distribuídos.

Já o gráfico da direita, um *Boxplot de Resíduos vs. Valores Ajustados*, tem por objetico verificar a homocedasticidade (igualdade das variâncias) dos resíduos. Este boxplot mostra a distribuição dos resíduos simulados para diferentes valores preditos pelo modelo (valores ajustados). Neste gráfico as caixas parecem ter tamanhos muito diferentes, indicando possível heterocedasticidade.

O teste de Levene, que é usado para testar a hipótese de homogeneidade das variâncias, também é aplicado ao se utilizar a função`simulateResiduals()` e significância do teste de Levene sugere que há heterocedasticidade, ou seja, a variância dos resíduos não é constante ao longo dos valores ajustados.

## Transformação dos Dados

Quando os dados não atendem aos pressupostos de normalidade e homocedasticidade, podemos aplicar uma transformação, como a raiz quadrada, Arco Seno, Logarítmica, Box Cox ou outros, para tentar normalizar os dados e estabilizar a variância.

### Transformação - Raiz quadrada

Quando temos dado de contagem geralmente se utiliza a raiz quadrada. Para isso transformamos a variável de contagem aplicando a raiz quadrada e visualizamos novamente os dados. Como no exempo:

```{r}
inseticida <- inseticida |>
  mutate(count2 = sqrt(count))
inseticida |>
  ggplot(aes(x = spray, y = count2))+
  geom_boxplot()+
  geom_jitter()+
  theme_bw()
```

```{r}
m2 <- lm(count2 ~ spray,
         data = inseticida)
summary(m2)
anova(m2)
m2$residuals
hist(m2$residuals)
qqnorm(m2$residuals)
qqline(m2$residuals)
```

```{r}
shapiro.test(m2$residuals)
bartlett.test(count2 ~ spray,
              data = inseticida)
```

```{r}
library(DHARMa)
plot(simulateResiduals(m2))

library(performance)
check_normality(m2)
check_heteroscedasticity(m2)
```

Agora os dados atendem a normalidade e homocedasticidade.

emmeans mostra o intervalo de confiança

```{r}
library(emmeans)
m1_medias <- emmeans(m1, ~ spray)
plot(m1_medias)
```

```{r}
library(multcomp)
cld(m1_medias)
```

```{r}
library(emmeans)
m2_medias <- emmeans(m2, ~ spray)
plot(m2_medias)
```

```{r}
library(multcomp)
cld(m2_medias)
```

```{r}
pwpm(m2_medias)
pwpp(m2_medias)

```

```{r}
pairs(m2_medias)
```

podemos aplicar de Box-Cox

```{r}
library(MASS)
b <- boxcox(lm(inseticida$count + 0.1 ~ 1))
lambda <- b$x[which.max(b$y)]
lambda
```

```{r}
inseticida$count3 <- (inseticida$count^lambda-1)/lambda
inseticida$count3
```

Se lambda for igual a 0.5 é igual a raiz quadrada

```{r}
m5 <- lm(count3 ~ spray,
         data = inseticida)
library(DHARMa)
plot(simulateResiduals(m5))

library(performance)
check_normality(m5)
check_heteroscedasticity(m5)
```

Alternativa, usando testes não paramétricos

```{r}
library(agricolae)
print('-=-=-=-=-=-=- DO PRÓPRIO R -=-=-=-=-=-=-')
kruskal.test(count ~ spray,
             data = inseticida)
print('-=-=-=-=-=-=- DO PACOTE AGRICOLAE -=-=-=-=-=-=-')
m3 <- kruskal(inseticida$count,
        inseticida$spray,
        group = TRUE)
m3
```

generalizado é mais bonito, mais moderno, mais aceito.

Alternativa usando GLMs

```{r}
m4 <- glm(count ~spray,
          family = gaussian,
          data = inseticida)
summary(m4)
anova(m4)
library(car)
Anova(m4)
```

Tem que olhar a familia da distribuição olhando os pressupostos.

```{r}
library(DHARMa)
m5 <- glm(count ~spray,
          family = poisson,
          data = inseticida)
summary(m5)
Anova(m5)
plot(simulateResiduals(m5))
```

```{r}
m5_medias <- emmeans(m5, ~ spray,
                     type = 'response')
library(multcomp)
library(multcompView)
cld(m5_medias)
```

Outro conjunto de dados two-way anova - ANOVA fatorial

```{r}
library(gsheet)
li <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit#gid=2023059672")

head(li)
```

```{r}
library(ggplot2)
li |>
  ggplot(aes(factor(dose),severity, color = factor(dose)))+
  geom_jitter(width = 0.1)+
  facet_wrap(~treat)+
  theme_bw()
```

```{r}
li |>
  ggplot(aes(treat ,severity, color = factor(dose)))+
  geom_jitter(width = 0.1)
```

Modelo fatoral - Para DIC

```{r}
mf <- lm(severity ~ treat*factor(dose),
         data = li)
mf
anova(mf)
```

```{r}
library(DHARMa)
plot(simulateResiduals(mf))
```

```{r}
library(performance)
check_normality(mf)
check_homogeneity(mf)
```

O cld, do pacote multcomp, coloca as letras.

```{r}
mf_medias <- emmeans(mf, ~ treat | dose)
mf_medias
```

```{r}
library(multcomp)
mf_medias <- emmeans(mf, ~ dose | treat)
cld(mf_medias)
```
