{
  "hash": "5e8e11e90440d4bff95d58156febcc33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Importando e Manipulando dados\"\nauthor: \"Gabriel A. D. Serafini\"\nformat: html\neditor: visual\n---\n\n\n# ^Importando\\ Datasets^\n\nA importação de dados é um passo crucial na análise de dados, pois permite que você traga informações de várias fontes para dentro do ambiente R, onde podem ser limpas, manipuladas e analisadas. Com R, você pode importar dados de diversos formatos, como CSV, Excel, e até mesmo planilhas online do Google Sheets. Utilizar pacotes específicos para cada tipo de arquivo garante que os dados sejam lidos de maneira eficiente e sem erros.\n\n## Importando Dados de Pacotes\n\nMuitas vezes, com o intuito de que o usuário possa testar algumas funções dos pacotes, estes pacotes possuem conjuntos de dados que podem ser importados ou carregados e utilizados.\n\nA título de ensino, vamos começar com a instalação e carregamento do pacote `ec50estimator`, que é utilizado para estimativas de EC50 em análises biológicas. Neste pacote, utilizaremos o conjunto de dados `multi_isolate`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ec50estimator)\nhead(multi_isolate)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  isolate   field   fungicida  dose     growth\n1       1 Organic Fungicide A 0e+00 20.2082399\n2       1 Organic Fungicide A 1e-05 20.1168279\n3       1 Organic Fungicide A 1e-04 19.2479678\n4       1 Organic Fungicide A 1e-03 15.8123455\n5       1 Organic Fungicide A 1e-02  7.3206757\n6       1 Organic Fungicide A 1e-01  0.6985264\n```\n\n\n:::\n:::\n\n\nPodemos atribuir os dados a um objeto, neste caso ao objeto `df1` e usaremos a função `View(df1)` para abrir uma nova aba exibindo os dados. `View()` é particularmente útil para uma inspeção rápida dos dados em uma interface tabular.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- multi_isolate\nView(df1)\n```\n:::\n\n\n## Leitura e Importação de Dados de Arquivos Excel\n\nOutra opção é a importação de arquivos existentes no próprio computador do usuário, como arquivos de dados em Excel. Para a leitura e importação de dados em Excel, utilizaremos o pacote `readxl`, e para isso é necessário que instale e carregue este pacote.\n\nO pacote `readxl`, que permite a leitura de arquivos Excel (.xlsx). Este pacote é especialmente útil para importar dados que são frequentemente armazenados em planilhas.\n\nPara ler um arquivo Excel na pasta do projeto, use o comando `read_excel(\"nome_do_arquivo.xlsx\")`, caso o arquivo esteja em outra pasta é necessário colocar, dentro dos parênteses, o caminho do arquivo antes do nome.\n\nSe você precisar abrir uma planilha específica, como \"escala\", utilize o argumento `sheet`. O segundo argumento é um parâmetro opcional, podendo ser o nome da aba ou apenas o número da aba sem aspas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\ndf2 <- read_excel(\"dados-diversos.xlsx\")\ndf21 <- read_excel(\"dados-diversos.xlsx\", sheet = \"escala\")\n#Outras formas de abri e/ou atribuir abas específicas\n#df21 <- read_excel(\"dados-diversos.xlsx\", \"escala\")\n#df21 <- read_excel(\"dados-diversos.xlsx\", 2)\n```\n:::\n\n\n## Leitura e Importação de Dados de Arquivos CSV\n\nOutra opção, para arquivos CSV, é a utilização do pacote `tidyverse`, uma coleção de pacotes R para ciência de dados, incluindo `readr` para leitura de arquivos CSV. O `tidyverse` simplifica e uniformiza várias operações de manipulação de dados.\n\nNeste caso utilizamos a função `read_csv``(\"nome_do_arquivo.xlsx\")`, lembrando que, caso o arquivo esteja em outra pasta é necessário colocar o caminho do arquivo antes do nome.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ndf3 <- read_csv(\"dados-diversos.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Irrigation\ndbl (3): rep, day, severity\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Leitura e Importação de Dados de Arquivos do Drive Utilizando Google Sheets\n\nAtualmente a utilização de drives em nuvem para salvar bancos de dados está amplamente difundida Isso é devido a facilidade de acesso aos dados, que pode ser feita de qualquer dispositivo, desde que se tenha acesso a internet.\n\nPara utilizar um banco de dados diretamente do Google Drive, por exemplo, pode-se utilizar os pacotes `gsheet` e `googlesheets4`. O pacote `gsheet` permite a leitura rápida de Google Sheets usando URLs, enquanto o `googlesheets4` oferece funcionalidade mais abrangente para leitura e escrita em Google Sheets.\n\nNo caso do pacote `gsheet`, a função utilizada para abrir e importar dados de arquivos no Google Drive é o `gsheet2tbl(``\"link_do_arquivo\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gsheet)\ndf4 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit?usp=sharing\")\n\ndf41 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit?usp=sharing\", sheetid = \"2\")\n```\n:::\n\n\nPara o pacote `googlesheets4`, o nome da função é `read_sheet``(\"link_do_arquivo\")`. Ele permite não somente baixar, mas ele permite também escrever nos arquivos.\n\n`library(googlesheets4) df5 <- read_sheet(\"https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit?usp=sharing\")`\n\n## Visualização de Dados\n\nPara criar gráficos para análise exploratória das variáveis, utilizaremos o `ggplot2`, um dos pacotes mais populares do R para visualização de dados. A função `geom_point` mostra os pontos de uma variável, mas pode ocorrer destes pontos estarem sobrepostos, assim pode-se utilizar a função `geom_jitter` para desagregar os pontos.\n\nPodemos adicionar camadas com o operador `+`, como `geom_boxplot`. A ordem das camadas determina como elas serão exibidas: a primeira camada chamada fica na parte inferior e as subsequentes são empilhadas acima.\n\nPara evitar duplicação de outliers, utilize `outlier.colour = NA`.\n\nTemas específicos também podem ser aplicados, como `theme_bw()` para um visual preto e branco utilizado em artigos cientificos, ou `theme_classic`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ng1 <- df4 |>\n  ggplot(aes(trat, comp))+\n  geom_point(color = \"red\", shape = 2, size = 3)\ng1 + theme_classic()+\n  labs(x = \"Tratamento\", #Label do eixo x\n       y = \"Comprimento\", #Label do eixo y\n       title = \"Meu primeiro ggplot\", #Adiciona título ao gráfico\n       caption = \"Fonte: Dados diversos\") #Adiciona fonte ao gráfico\n```\n\n::: {.cell-output-display}\n![](aula_02b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\ng2 <- df4 |>\n  ggplot(aes(trat, comp))+\n  geom_boxplot(outlier.colour = NA,\n               fill = \"green\")+\n  geom_jitter(width = 0.05,\n              color = \"blue\",\n              shape = 3,\n              size = 2)\ng2 + theme_bw() +\n  #ylim(0,20) #Outra opção para a função abaixo\n  scale_y_continuous(limits = c(0,20),\n                     n.breaks = 5) #n.breaks é o número de quebras, se colocar breaks apenas, fica só a linha correspondente aquele número.\n```\n\n::: {.cell-output-display}\n![](aula_02b_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\nApós a criação do gráfico, através do pacote `ggplot2`, podemos salvar os gráficos utilizando a função `ggsave`. A função `ggsave` é usada para salvar gráficos criados com `ggplot2` em diferentes formatos de arquivo, como PNG, PDF, JPEG, entre outros. Isso é útil para documentar visualizações, compartilhar resultados ou incluir gráficos em relatórios e apresentações.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"plot1.png\", bg = \"white\") #O parâmetro \"bg\" é a cor de fundo ou \"background\"\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\nEntendendo esses passos, você será capaz de importar dados de diversas fontes, realizar manipulações e criar visualizações ricas utilizando R e seus pacotes associados. Cada pacote desempenha um papel crucial na simplificação e eficiência das suas tarefas de análise de dados.\n",
    "supporting": [
      "aula_02b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}