{
  "hash": "dcea186a03ade7b80de46caf985447ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Análise exploratória: Visualização de dados\"\nauthor: \"Gabriel A. D. Serafini\"\nformat: html\neditor: visual\nwarming: false\nmenssage: false\n---\n\n\n# Visualização de Dados\n\nA visualização de dados é um componente essencial na análise de dados, permitindo que você explore, entenda e comunique padrões, tendências e insights de forma eficaz. Utilizando gráficos e tabelas, você pode transformar dados brutos em informações visuais compreensíveis, facilitando a interpretação e tomada de decisões. No R, pacotes como `ggplot2`, `tidyverse` e `patchwork` oferecem ferramentas poderosas para criar visualizações sofisticadas e personalizadas.\n\n## Abrindo e importando Arquivo CSV\n\nPara abrir uma planilha em formato .CSV, utilizamos o pacote `tidyverse`. Este pacote inclui o `readr`, que oferece a função `read_csv` para ler arquivos CSV de maneira eficiente.\n\nCaso hajam dúvidas sobre como abrir e importar arquivos ou os arquivos estejam em outros formatos, sugiro ler a aula \"Importando Datasets\" na aba \"Básico\".\n\n### Configurando o Chunk\n\nUma dica importante é colocar dentro do primeiro chunk, `#| warning: false` e `#| message: false` para não sejam exibidos avisos e mensagens ao renderizar o documento. Se preferir, você pode aplicar essa configuração a todos os chunks colocando no cabeçalho do documento.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Carregando pacote\nlibrary(tidyverse)\n#Importando arquivo CSV do Git Hub\ncr <- read_csv(\"https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv\")\n```\n:::\n\n\n### Explorando os dados\n\nExplorar e entender os dados é fundamental para uma boa análise destes dados. A função `head` apresenta um sumário dos dados, com as 6 primeiras linhas e as colunas existentes, com o nome da variável e o tipo da variável. Assim essa função permite um entendimento do que são os seus dados, variáveis e tipo delas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n   farm region zone       district      lon   lat altitude cultivar shade    \n  <dbl> <chr>  <chr>      <chr>       <dbl> <dbl>    <dbl> <chr>    <chr>    \n1     1 SNNPR  Bench Maji Debub Bench  35.4  6.90     1100 Local    Sun      \n2     2 SNNPR  Bench Maji Debub Bench  35.4  6.90     1342 Mixture  Mid shade\n3     3 SNNPR  Bench Maji Debub Bench  35.4  6.90     1434 Mixture  Mid shade\n4     4 SNNPR  Bench Maji Debub Bench  35.4  6.90     1100 Local    Sun      \n5     5 SNNPR  Bench Maji Debub Bench  35.4  6.90     1400 Local    Sun      \n6     6 SNNPR  Bench Maji Debub Bench  35.4  6.90     1342 Mixture  Mid shade\n# ℹ 4 more variables: cropping_system <chr>, farm_management <chr>, inc <dbl>,\n#   sev2 <dbl>\n```\n\n\n:::\n:::\n\n\nOutra opção para visualizar o conjunto de dados é a função `glimpse` que mostra detalhes da tabela, como nome da variável, tipo e uma pequana amostra dos dados desta váriaveis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(cr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 405\nColumns: 13\n$ farm            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ region          <chr> \"SNNPR\", \"SNNPR\", \"SNNPR\", \"SNNPR\", \"SNNPR\", \"SNNPR\", …\n$ zone            <chr> \"Bench Maji\", \"Bench Maji\", \"Bench Maji\", \"Bench Maji\"…\n$ district        <chr> \"Debub Bench\", \"Debub Bench\", \"Debub Bench\", \"Debub Be…\n$ lon             <dbl> 35.44250, 35.44250, 35.42861, 35.42861, 35.42861, 35.3…\n$ lat             <dbl> 6.904722, 6.904722, 6.904444, 6.904444, 6.904444, 6.90…\n$ altitude        <dbl> 1100, 1342, 1434, 1100, 1400, 1342, 1432, 1100, 1400, …\n$ cultivar        <chr> \"Local\", \"Mixture\", \"Mixture\", \"Local\", \"Local\", \"Mixt…\n$ shade           <chr> \"Sun\", \"Mid shade\", \"Mid shade\", \"Sun\", \"Sun\", \"Mid sh…\n$ cropping_system <chr> \"Plantation\", \"Plantation\", \"Plantation\", \"Plantation\"…\n$ farm_management <chr> \"Unmanaged\", \"Minimal\", \"Minimal\", \"Unmanaged\", \"Unman…\n$ inc             <dbl> 86.70805, 51.34354, 43.20000, 76.70805, 47.15808, 51.3…\n$ sev2            <dbl> 55.57986, 17.90349, 8.25120, 46.10154, 12.25167, 19.91…\n```\n\n\n:::\n:::\n\n\n### Histogramas e Resumos\n\nOs histogramas ajudam a observar a distribuição dos dados, a função para isso é `geom_histogram()` do pacote `ggplot2`. Podemos plotar um histograma para cada região utilizando o `facet_wrap`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n# Histogramas de incidência por região\ncr |>\n  ggplot(aes(x = inc))+\n  geom_histogram()+ #Histograma\n  facet_wrap(~region) #Separa por região.\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAlém disso, o comando `summary` fornece um sumário estatístico das variáveis. E assim como foi plotado um histograma para cada região, podemos pedir um sumário para cada região ou até por cultivar agrupando utilizando a função `group_by()`.\n\nDentro da função `summarize`, podemos utilizar as funções para obter a média, mediana e desvio padrão através das funções `mean()`, `median()` e `sd()`, respectivamente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sumário dos dados de incidência\nsummary(cr$inc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   9.50   19.43   32.50   34.89   48.20   86.71 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estatísticas de incidência por região\ncr |>\n  group_by(region) |>\n  summarize(inc_mean = mean(inc),\n            inc_med = median(inc),\n            sd_mean = sd(inc))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  region inc_mean inc_med sd_mean\n  <chr>     <dbl>   <dbl>   <dbl>\n1 Oromia     37.0    39.5    14.6\n2 SNNPR      33.4    29.6    18.9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estatísticas de incidência por cultivar\ncr |>\n  group_by(cultivar) |>\n  summarize(inc_mean = mean(inc),\n            inc_med = median(inc),\n            sd_mean = sd(inc))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  cultivar inc_mean inc_med sd_mean\n  <chr>       <dbl>   <dbl>   <dbl>\n1 Improved     16.4    15.2    5.66\n2 Local        53.4    50.9   14.3 \n3 Mixture      31.9    31.6   11.2 \n```\n\n\n:::\n:::\n\n\n#### Mas o que é media, mediana e desvio padrão?\n\n-   A **média (mean)** é a soma de todos os valores dividida pelo número total de observações. Ela fornece uma ideia do valor central dos dados.\n\n-   A **mediana** **(Median)** é o valor central de um conjunto de dados ordenado. Se o número de observações for par, é a média dos dois valores centrais. Ela divide os dados em duas metades iguais.\n\n-   O **desvio padrão (Standard Deviation)** mede a dispersão dos valores em relação à média. Um desvio padrão alto indica valores espalhados, enquanto um desvio padrão baixo indica valores próximos à média.\n\n### Gráfico de Dispersão\n\nPara observar a relação entre duas variáveis, podemos utilizar gráficos de dispersão e para observar essa relação pode ser utilizado a função `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr |>\n  ggplot(aes(inc, sev2))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nPodemos obervar melhor a simetria das variáveis, se a mediana e média dos dados forem mais próximas uma da outra, a curva é simétrica. Se os dados forem não simétricos, podemos observar uma assimetria com cauda para a direita ou a esquerda.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ncr |>\n  ggplot(aes(x = sev2))+\n  geom_histogram()+\n  facet_wrap(~region) #Separa por região.\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(cr$sev2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2248  2.6892  5.9490  9.0945 12.1593 55.5799 \n```\n\n\n:::\n\n```{.r .cell-code}\ncr |>\n  group_by(region) |>\n  summarize(sev_mean = mean(sev2),\n            sev_med = median(sev2),\n            sd_mean = sd(sev2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  region sev_mean sev_med sd_mean\n  <chr>     <dbl>   <dbl>   <dbl>\n1 Oromia     8.06    6.23    6.82\n2 SNNPR      9.81    4.88   10.5 \n```\n\n\n:::\n:::\n\n\nAssim, relembrando, a simetria das variáveis pode ser observada através de histogramas e variáveis simétricas terão médias e medianas próximas, enquanto variáveis assimétricas não apresentam médias e medianas próximas e podem mostrar caudas ao ser plotado o histograma como o exemplo acima.\n\nPorém, se formos olhar por cultivar, os dados ficam mais simétrico, como mostrado abaixo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ncr |>\n  ggplot(aes(x = sev2))+\n  geom_histogram()+\n  facet_wrap(~cultivar) #Separa por região.\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(cr$sev2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2248  2.6892  5.9490  9.0945 12.1593 55.5799 \n```\n\n\n:::\n\n```{.r .cell-code}\ncr |>\n  group_by(cultivar) |>\n  summarize(sev_mean = mean(sev2),\n            sev_med = median(sev2),\n            sd_mean = sd(sev2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  cultivar sev_mean sev_med sd_mean\n  <chr>       <dbl>   <dbl>   <dbl>\n1 Improved     2.16    1.64    1.82\n2 Local       18.7    17.2    11.1 \n3 Mixture      6.47    5.43    4.35\n```\n\n\n:::\n:::\n\n\n### Personalizando Gráficos\n\nOs gráficos podem ser personalizados de uma infinidade de formas, por exemplo, podemos modificar as cores por região. Lembrando de colocar `fill` na função `ggplot`, se for colocado depois ele irá alterar os gráficos. De mesma forma quando usamos um tema, como o `theme_minimal` usado no exemplo, tem que ver após o `scale_fill_manual`, pois irá sobrescever o tema anterior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\ncr |>\n  ggplot(aes(x = sev2, fill = region))+ #Aqui foi adicionado o fill\n  geom_histogram(color = \"white\")+ #Color aqui é para aborda das barras do histograma.\n  facet_wrap(region ~ cultivar, ncol = 6)+ #ncol coloca o número de colunas por plot\n  #scale_fill_colorblind() #Aqui altera a plheta de cores\n  scale_fill_manual(values = c(\"red\", \"blue\"))+ #escolha manual\n  theme_minimal(base_size = 14)+ #vem depois, se não sobrescreve o scale_fill_manual, aqui também altera a fonte com base_size)\n  theme(legend.position = \"bottom\")+\n  labs(y = \"Frequency\",\n       x = \"Severity (%)\",\n       fill = \"Region\") #Alterou o nome, que estava como o da variável\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"cr1.png\", bg =\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n:::\n\n\n## Criação de subconjunto\n\n### Seleção e Filtro\n\nPara criar subconjuntos de dados, podemos selecionar as colunas com a função `select()` e podemos atribuir este subconjunto a um objeto, como no exemplo o objeto `cr2`. No exemplo foram selecionados as colunas, ou variáveis, fazenda (farm), região (region), cultivar (cultivar) e severidade (sev2).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr2 <- cr |>\n  select(farm, region, cultivar, sev2) #select é pra colunas\n\ncr2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405 × 4\n    farm region cultivar  sev2\n   <dbl> <chr>  <chr>    <dbl>\n 1     1 SNNPR  Local    55.6 \n 2     2 SNNPR  Mixture  17.9 \n 3     3 SNNPR  Mixture   8.25\n 4     4 SNNPR  Local    46.1 \n 5     5 SNNPR  Local    12.3 \n 6     6 SNNPR  Mixture  19.9 \n 7     7 SNNPR  Mixture  11.9 \n 8     8 SNNPR  Local    55.6 \n 9     9 SNNPR  Local    11.6 \n10    10 SNNPR  Mixture  11.4 \n# ℹ 395 more rows\n```\n\n\n:::\n:::\n\n\nPodemos também, filtrar os dados usando o `filter()` do pacote `dplyr` em conjunto com a função `select()` para escolher colunas e filtrar as linhas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Filtra Oromia\ncr_oromia <- cr |>\n  select(farm, region, cultivar, sev2) |> #select é pra colunas\n  filter(region == \"Oromia\")\ncr_oromia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 165 × 4\n    farm region cultivar  sev2\n   <dbl> <chr>  <chr>    <dbl>\n 1   286 Oromia Mixture   7.63\n 2   287 Oromia Mixture   9.39\n 3   288 Oromia Mixture   1.30\n 4   289 Oromia Mixture   9.79\n 5   290 Oromia Local    18.5 \n 6   291 Oromia Mixture  13.2 \n 7   292 Oromia Mixture   5.60\n 8   293 Oromia Mixture   1.06\n 9   294 Oromia Local    17.6 \n10   295 Oromia Mixture  15.4 \n# ℹ 155 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n#Filtra SNNPR\ncr_pr <- cr |>\n  select(farm, region, cultivar, sev2) |>#select é pra colunas\n  filter(region == \"SNNPR\")\ncr_pr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 240 × 4\n    farm region cultivar  sev2\n   <dbl> <chr>  <chr>    <dbl>\n 1     1 SNNPR  Local    55.6 \n 2     2 SNNPR  Mixture  17.9 \n 3     3 SNNPR  Mixture   8.25\n 4     4 SNNPR  Local    46.1 \n 5     5 SNNPR  Local    12.3 \n 6     6 SNNPR  Mixture  19.9 \n 7     7 SNNPR  Mixture  11.9 \n 8     8 SNNPR  Local    55.6 \n 9     9 SNNPR  Local    11.6 \n10    10 SNNPR  Mixture  11.4 \n# ℹ 230 more rows\n```\n\n\n:::\n:::\n\n\n### Visualizando subconjuntos\n\nAinda podemos gerar gráficos `ggplot2` para cada subconjunto para uma melhor visualização dos dados. No caso utilizamos o boxplot através da função `geom_boxplot()`, também do pacote `ggplot2`.\n\nO **box plot** é uma representação gráfica que mostra a distribuição de um conjunto de dados de maneira resumida, destacando a mediana, os quartis e os outliers. Os componentes de um boxplot são:\n\n1.  **Caixa**:\n\n    -   **Quartil Inferior (Q1)**: Marca os 25% mais baixos dos dados.\n\n    -   **Mediana (Q2)**: O valor central dos dados (50%).\n\n    -   **Quartil Superior (Q3)**: Marca os 75% mais baixos dos dados.\n\n2.  **Whiskers**:\n\n    -   Linhas que se estendem dos quartis até o valor mínimo e máximo dentro de 1.5 vezes o intervalo interquartil (IQR).\n\n3.  **Outliers**:\n\n    -   Pontos fora do alcance dos whiskers, indicando valores atípicos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr_oromia |>\n  ggplot(aes(x = cultivar,\n             y = sev2))+\n  geom_boxplot()+\n  labs(title = \"Oromia\",\n       X = \"Cultivar\",\n       y = \"Severity (%)\")\n```\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncr_pr |>\n  ggplot(aes(x = cultivar,\n             y = sev2))+\n  geom_boxplot()+\n  labs(title = \"SNNPR\",\n       X = \"Cultivar\",\n       y = \"Severity (%)\")\n```\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nO box plot é útil para identificar a mediana, a dispersão, a assimetria e os outliers em um conjunto de dados, facilitando a comparação entre diferentes grupos ou categorias.\n\n### Gráficos lado a lado.\n\nGráficos exibidos lado a lado podem auxiliar na percepção de diferença entre dois grupos quando queremos apresenta-las ao leitor de um artigo, por exemplo. Assim, para plotar dois gráficos lado a lado iremos utilizar a biblioteca `patchwork`, sem usar o `face_wrap`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- cr_oromia |>\n  ggplot(aes(x = cultivar,\n             y = sev2,\n             fill = cultivar))+\n  geom_boxplot()+\n  labs(x = \"Cultivar\",\n       y = \"Severity (%)\")#+ #lembrar de tirar o comentário do +\n  #coord_flip() #rotaciona as coordenadas\n\np2 <- cr_pr |>\n  ggplot(aes(x = cultivar,\n             y = sev2,\n             fill = cultivar))+\n  geom_boxplot()+\n  labs(x = \"Cultivar\",\n       y = \"Severity (%)\")#+ #lembrar de tirar o comentário do +\n  coord_flip() #rotaciona as coordenadas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<ggproto object: Class CoordFlip, CoordCartesian, Coord, gg>\n    aspect: function\n    backtransform_range: function\n    clip: on\n    default: FALSE\n    distance: function\n    expand: TRUE\n    is_free: function\n    is_linear: function\n    labels: function\n    limits: list\n    modify_scales: function\n    range: function\n    render_axis_h: function\n    render_axis_v: function\n    render_bg: function\n    render_fg: function\n    setup_data: function\n    setup_layout: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    setup_params: function\n    train_panel_guides: function\n    transform: function\n    super:  <ggproto object: Class CoordFlip, CoordCartesian, Coord, gg>\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)\n\n(p1 + p2) + #Pode ser + ou |, se colocar / coloca um sobre o outro. Ele funciona como equação, pode ser feito combinação dos gráficos como p1/(p2+p1)\nplot_layout(guides = \"collect\") + #Deixa somente uma legenda\nplot_annotation(tag_levels = \"A\") #Diferencia maiúsculas e minúsculas\n```\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"patch.png\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\nPodemos usar o artifício da função `coord_flip()`, para rotacionar as coordenadas de uma imagem ou das duas, caso fique visualmente mais adequado para a explicação dos dados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- cr_oromia |>\n  ggplot(aes(x = cultivar,\n             y = sev2,\n             fill = cultivar))+\n  geom_boxplot()+\n  theme_few() +\n  labs(x = \"Cultivar\",\n       y = \"Severity (%)\")+\n  coord_flip() #rotaciona as coordenadas\n\np2 <- cr_pr |>\n  ggplot(aes(x = cultivar,\n             y = sev2,\n             fill = cultivar))+\n  geom_boxplot()+\n  theme_few() +\n  labs(x = \"Cultivar\",\n       y = \"Severity (%)\")+\n  coord_flip() #rotaciona as coordenadas\n\n#Não consegui instalar o patchwork\nlibrary(patchwork)\n\n(p1 / p2) + #pode ser + ou |, se colocar / coloca um sobre o outro. Ele funciona como equação, pode ser feito combinação dos gráficos como p1/(p2+p1)\nplot_layout(guides = \"collect\",\n            axes = \"collect\")+ #Deixa somente uma legenda\nplot_annotation(title = \"Coffe rust is Ethiopia\",\n                caption = \"source: Serafini (2024)\",\n                tag_levels = \"A\") #diferencia maiúsculas e minúsculas\n```\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"patch2.png\", width = 5, height = 4)\n```\n:::\n\n\nOutra opção de combinações que o pacote permite é a sobreposição de gráficos através da função `inset_element()`, onde é inserido o gráfico que se deseja plotar e as dimensões/posições deste na imagem. Este é um excelente artifício para exibir informações gráficas complementares em uma mesma imagem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- cr_oromia |>\n  ggplot(aes(x = cultivar,\n             y = sev2,\n             fill = cultivar))+\n  geom_boxplot()+\n  theme_few() +\n  labs(x = \"Cultivar\",\n       y = \"Severity (%)\")+\n  coord_flip() #rotaciona as coordenadas\n\np3 <- cr_oromia |>\n  ggplot(aes(x = sev2))+\n  geom_histogram() +\n  labs(y = \"Freq.\",\n       x = \"Severity (%)\")\n\np1 + inset_element(p3, left = 0.6,\n                    bottom = 0.6,\n                    right = 1,\n                    top = 1) +\n  plot_annotation(title = \"Coffe rust is Ethiopia\",\n                caption = \"source: Serafini (2024)\",\n                tag_levels = \"A\") #diferencia maiúsculas e minúsculas\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](aula_03_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"patch3.png\", width = 5, height = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n:::\n\n\nO `patchwork` tem várias possíbilidades interessantes, vale a pena olhar a ajuda (help) deste pacote!\n",
    "supporting": [
      "aula_03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}